
fh: the CLI for FlakeHub
  https://determinate.systems/posts/flakehub-cli/

requirements
  1) pip freeze > requirements.txt
  2) nix - virtualenv requirements > requirements.txt
       (nix:nix-shell-env) basalami@DESKTOP-OVTUU9N:~/niqflex/oss-sscs-api/ossapi$ virtualenv requirements > requirements.txt


Nixpkgs
  A collection of tens of thousands of Nix packages and build utilities for the Nix language

Symbolic identifier	   Full flake reference
   nixpkgs	             github:NixOS/nixpkgs/nixpkgs-unstable
   flake-utils	         github:numtide/flake-utils


Flak ouput - Flake outputs are what a flake produces as part of its build
     https://nixos-and-flakes.thiscute.world/other-usage-of-flakes/outputs
     https://zero-to-nix.com/concepts/flakes#outputs

Practical Nix Flakes
     https://serokell.io/blog/practical-nix-flakes    
===========================================

Turn your project into a flake
    https://zero-to-nix.com/start/init-flake
a)	Go to Dev Env : nix develop
b)	Top updated flake.nix
1)	Update the file
2)	To Exit Dev Env type:  exit
3)	Run: nix flake update
4)	Back to DevEnv:     nix develop

=======================================================

buildInputs and propagatedBuildInputs
======================================
dependencies is specifyied in buildInputs and propagatedBuildInputs 
build-time dependency should be included in buildInputs
runtime dependency should be added to propagatedBuildInputs
Test dependencies are considered build-time dependencies and passed to nativeCheckInputs


Ad-hoc temporary Python environment with nix-shell 
   https://nixos.org/manual/nixpkgs/stable/#ad-hoc-temporary-python-environment-with-nix-shell
    sets up Python environments using nix-shell at the cmdline
      To create a Python 3.11 session with numpy and toolz available, run:
      $ nix-shell -p 'python311.withPackages(ps: with ps; [ numpy toolz ])'
      We can add as many additional modules onto the nix-shell as we need, and we will still get 1 wrapped Python interpreter. 
       $ nix-shell -p "python311.withPackages (ps: with ps; [ numpy toolz requests ])" --run python3


# This flake was initially generated by fh, the CLI for FlakeHub (version 0.1.8)
{
  # A helpful description of your flake
  description = "oss aps";

  # Flake inputs
  inputs = {
    flake-schemas.url = "https://flakehub.com/f/DeterminateSystems/flake-schemas/*.tar.gz";
    nixpkgs.url = "https://flakehub.com/f/NixOS/nixpkgs/*.tar.gz";
  };
  
  # Flake outputs that other flakes can use
  # outputs is a function that takes an attribute set of inputs
  # self â€“ which refers to the flake that Nix is currently evaluating
  # see more about output here 
  #    https://nixos-and-flakes.thiscute.world/other-usage-of-flakes/outputs
  ===========
      packages = forEachSupportedSystem ({ pkgs }: {
        # alias pkgs.python3Packages pointing to pkgs.python311Packages
        #buildPythonApplication function is used to build a Python package where one is interested only in the executables and not importable modules
        default =  pkgs.python3Packages.buildPythonApplication { 
          name = "oss-app";
          version = "0.0.1";
          pyproject = true;          
          src = ./.;

        };               
      }); 